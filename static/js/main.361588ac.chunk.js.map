{"version":3,"sources":["providers/authProvider.js","resources/Users/index.js","resources/Posts/index.js","App.js","reportWebVitals.js","index.js"],"names":["login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","UserList","props","List","Datagrid","rowClick","TextField","source","EmailField","UrlField","PostTitle","record","title","PostEditActions","basePath","data","TopToolbar","style","justifyContent","ListButton","label","icon","PostFilter","Filter","TextInput","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","filters","ReferenceField","EditButton","PostEdit","Edit","actions","SimpleForm","multiline","PostCreate","Create","messages","ptBrMessages","i18nProvider","polyglotI18nProvider","locale","dataProvider","jsonServerProvider","App","Admin","authProvider","Resource","name","list","edit","create","PostIcon","UserIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.361588ac.chunk.js","sourcesContent":["export default {\n  // called when the user attempts to log in\n  login: ({ username }) => {\n    localStorage.setItem(\"username\", username);\n    // accept all username/password combinations\n    return Promise.resolve();\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem(\"username\");\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({ status }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem(\"username\");\n      return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem(\"username\")\n      ? Promise.resolve()\n      : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve(),\n};\n","import * as React from \"react\";\nimport { List, Datagrid, TextField, EmailField, UrlField } from \"react-admin\";\n\nexport const UserList = (props) => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"id\" />\n      <TextField source=\"name\" />\n      <EmailField source=\"email\" />\n      <TextField source=\"phone\" />\n      <UrlField source=\"website\" />\n      <TextField source=\"company.name\" />\n    </Datagrid>\n  </List>\n);\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ReferenceField,\n  EditButton,\n  Edit,\n  SimpleForm,\n  ReferenceInput,\n  SelectInput,\n  TextInput,\n  Create,\n  Filter,\n  TopToolbar,\n  ListButton,\n  ShowButton,\n} from \"react-admin\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\n\nconst PostTitle = ({ record }) => {\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\n};\n\nconst PostEditActions = ({ basePath, data }) => (\n  <TopToolbar style={{ justifyContent: \"flex-start\" }}>\n    <ListButton basePath={basePath} label=\"Voltar\" icon={<ChevronLeft />} />\n  </TopToolbar>\n);\n\nconst PostFilter = (props) => (\n  <Filter {...props}>\n    <TextInput label=\"Buscar\" source=\"q\" alwaysOn />\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n  </Filter>\n);\n\nexport const PostList = (props) => (\n  <List filters={<PostFilter />} {...props}>\n    <Datagrid rowClick=\"edit\">\n      <ReferenceField source=\"userId\" reference=\"users\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <TextField source=\"title\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\nexport const PostEdit = (props) => (\n  <Edit {...props} actions={<PostEditActions />} title={<PostTitle />}>\n    <SimpleForm>\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <TextInput source=\"title\" />\n      <TextInput multiline source=\"body\" />\n    </SimpleForm>\n  </Edit>\n);\n\nexport const PostCreate = (props) => (\n  <Create {...props}>\n    <SimpleForm>\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <TextInput source=\"title\" />\n      <TextInput multiline source=\"body\" />\n    </SimpleForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport { Admin, Resource, ListGuesser, EditGuesser } from \"react-admin\";\nimport authProvider from \"./providers/authProvider\";\nimport { UserList } from \"./resources/Users\";\nimport { PostList, PostEdit, PostCreate } from \"./resources/Posts\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport ptBrMessages from \"ra-language-pt-br\";\nimport polyglotI18nProvider from \"ra-i18n-polyglot\";\n\nimport PostIcon from \"@material-ui/icons/Book\";\nimport UserIcon from \"@material-ui/icons/Group\";\n\nconst messages = {\n  \"pt-br\": ptBrMessages,\n};\nconst i18nProvider = polyglotI18nProvider(\n  (locale) => messages[locale],\n  \"pt-br\"\n);\nconst dataProvider = jsonServerProvider(\"https://jsonplaceholder.typicode.com\");\n\nconst App = () => (\n  <Admin\n    authProvider={authProvider}\n    dataProvider={dataProvider}\n    i18nProvider={i18nProvider}\n  >\n    <Resource\n      name=\"posts\"\n      list={PostList}\n      edit={PostEdit}\n      create={PostCreate}\n      icon={PostIcon}\n    />\n    <Resource name=\"users\" list={UserList} icon={UserIcon} />\n  </Admin>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}